services:
  gateway:
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    container_name: gateway
    ports:
      - '${GATEWAY_PORT}:${GATEWAY_PORT}'
    environment:
      - PORT=${GATEWAY_PORT}
    command: npm run start:prod:gateway
    restart: unless-stopped
    networks:
      - webhook-network

  fb-collector:
    build:
      context: .
      dockerfile: apps/fb-collector/Dockerfile
    container_name: fb-collector
    env_file:
      - .env
    ports:
      - '${FB_COLLECTOR_PORT}:${FB_COLLECTOR_PORT}'
    environment:
      - PORT=${FB_COLLECTOR_PORT}
    command: npm run start:prod:fb-collector
    restart: unless-stopped
    networks:
      - webhook-network

  ttk-collector:
    build:
      context: .
      dockerfile: apps/ttk-collector/Dockerfile
    container_name: ttk-collector
    env_file:
      - .env
    ports:
      - '${TTK_COLLECTOR_PORT}:${TTK_COLLECTOR_PORT}'
    environment:
      - PORT=${TTK_COLLECTOR_PORT}
    command: npm run start:prod:ttk-collector
    restart: unless-stopped
    networks:
      - webhook-network

  reporter:
    build:
      context: .
      dockerfile: apps/reporter/Dockerfile
    container_name: reporter
    env_file:
      - .env
    ports:
      - '${REPORTER_PORT}:${REPORTER_PORT}'
    environment:
      - PORT=${REPORTER_PORT}
    command: npm run start:prod:reporter
    restart: unless-stopped
    networks:
      - webhook-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./libs/metrics-core/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    restart: unless-stopped
    networks:
      - webhook-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./libs/metrics-core/src/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./libs/metrics-core/src/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - '3004:3000'
    restart: unless-stopped
    networks:
      - webhook-network

  nats:
    image: nats
    container_name: nats
    ports:
      - '4222:4222'
      - '8222:8222'
    command: ['-js', '-m', '8222']
    restart: unless-stopped
    networks:
      - webhook-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - webhook-network

networks:
  webhook-network:
    driver: bridge
